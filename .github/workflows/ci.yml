name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service }}/package-lock.json

    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        npm ci

    - name: Run linter
      run: |
        cd ${{ matrix.service }}
        npm run lint || true

    - name: Run type check (TypeScript)
      run: |
        cd ${{ matrix.service }}
        if [ "${{ matrix.service }}" = "backend" ]; then
          npm run build
        elif [ "${{ matrix.service }}" = "frontend" ]; then
          npm run type-check 2>/dev/null || npm run build
        fi

    - name: Run tests
      run: |
        cd ${{ matrix.service }}
        npm test 2>/dev/null || echo "No tests found for ${{ matrix.service }}"

  # 安全检查
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker 镜像构建测试
  docker-build-test:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: false
        tags: ${{ matrix.service }}:test
        target: development
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 集成测试
  integration-test:
    runs-on: ubuntu-latest
    needs: [docker-build-test]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: gym_saas_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Run integration tests
      env:
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DATABASE_NAME: gym_saas_test
        DATABASE_USERNAME: postgres
        DATABASE_PASSWORD: testpassword
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-jwt-secret-key-for-ci-environment
        JWT_REFRESH_SECRET: test-jwt-refresh-secret-key-for-ci
      run: |
        cd backend
        npm run test:e2e 2>/dev/null || echo "No e2e tests configured"

  # Docker Compose 配置验证
  compose-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate development compose
      run: |
        docker-compose -f docker-compose.dev.yml config

    - name: Validate production compose
      run: |
        echo "DB_PASSWORD=test123" > .env
        echo "REDIS_PASSWORD=test123" >> .env
        echo "JWT_SECRET=test-jwt-secret-minimum-32-characters-long" >> .env
        echo "JWT_REFRESH_SECRET=test-jwt-refresh-secret-minimum-32-chars" >> .env
        docker-compose -f docker-compose.prod.yml config

  # 部署到开发环境
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build-test, integration-test, compose-validation]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=sha

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=sha

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到生产环境
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [lint-and-test, docker-build-test, integration-test, compose-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 通知部署结果
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        if [[ "${{ needs.deploy-dev.result }}" == "success" ]] || [[ "${{ needs.deploy-prod.result }}" == "success" ]]; then
          echo "✅ 部署成功"
        elif [[ "${{ needs.deploy-dev.result }}" == "failure" ]] || [[ "${{ needs.deploy-prod.result }}" == "failure" ]]; then
          echo "❌ 部署失败"
        else
          echo "⏭️ 跳过部署"
        fi